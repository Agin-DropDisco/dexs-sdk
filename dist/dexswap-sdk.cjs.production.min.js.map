{"version":3,"file":"dexswap-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/utils.ts","../src/errors.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/routable-platform.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/entities/fractions/priced-token-amount.ts","../src/entities/liquidity-mining-campaign.ts","../src/entities/priced-token.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\nimport MULTICALL_ABI from './abis/multicall.json'\nimport STAKING_REWARDS_FACTORY_ABI from './abis/staking-rewards-distribution-factory.json'\nimport STAKING_REWARDS_DISTRIBUTION_ABI from './abis/staking-rewards-distribution.json'\nimport {\n  rinkeby as coreRinkeby,\n  mainnet as coreMainnet,\n  harmony_testnet as coreHarmony_Testnet,\n  harmony as coreHarmony,\n  alfajores as coreAlfajores,\n} from 'dexswap-core/.contracts.json'\nimport {\n  rinkeby as peripheryRinkeby,\n  mainnet as peripheryMainnet,\n  harmony_testnet as peripheryHarmony_Testnet,\n  harmony as peripheryHarmony,\n  alfajores as peripheryAlfajores,\n} from 'dexswap-periphery/.contracts.json'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  RINKEBY = 4,\n  HARMONY = 1666600000,\n  HARMONY_TESTNET = 1666700000,\n  ALFAJORES = 44787,\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nexport const FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: coreMainnet.factory,\n  [ChainId.RINKEBY]: coreRinkeby.factory,\n  [ChainId.HARMONY]: coreHarmony.factory,\n  [ChainId.HARMONY_TESTNET]: coreHarmony_Testnet.factory,\n  [ChainId.ALFAJORES]: coreAlfajores.factory,\n\n}\n\nexport const ROUTER_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: peripheryMainnet.router,\n  [ChainId.RINKEBY]: peripheryRinkeby.router,\n  [ChainId.HARMONY]: peripheryHarmony.router,\n  [ChainId.HARMONY_TESTNET]: peripheryHarmony_Testnet.router,\n  [ChainId.ALFAJORES]: peripheryAlfajores.router,\n}\n\nexport const STAKING_REWARDS_FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x0000000000000000000000000000000000001234',\n  [ChainId.RINKEBY]: '0x709db16a6ef437197938256460c49183dc36ca4d',\n  [ChainId.HARMONY]: '0x3b2Cc22b41ed373a2E512E49D049d0E61ED226f8',\n  [ChainId.HARMONY_TESTNET]: '0x15b61cc2ac17e9826277b3ff41aa2644a774daab',\n  [ChainId.ALFAJORES]: '0x7042A1a7ca6DcDB8fEAEf1dd910d9dbace7Dfa63',\n}\n\n// export const INIT_CODE_HASH = '0x73d6dcc94c11d81141f8d9cdd590d156f773f79e2639eb9bb987549a338b82da'// OLD\nexport const INIT_CODE_HASH = '0x8e238a2a8b947c141eaf7dc617b2d765c57280c05c2062c045c200c62b16cf0c'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _25 = JSBI.BigInt(25)\nexport const SECONDS_IN_YEAR = JSBI.BigInt(31536000)\nexport const _30 = JSBI.BigInt(30)\nexport const _100 = JSBI.BigInt(100)\nexport const _1000 = JSBI.BigInt(1000)\nexport const _10000 = JSBI.BigInt(10000)\n\nexport const defaultSwapFee = _25\nexport const defaultProtocolFeeDenominator = FIVE\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nconst MULTICALL_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xeefba1e63905ef1d7acba5a8513c70307c1ce441',\n  [ChainId.HARMONY]: '0x4e24A3D6B6D47A4F56e4025C8A514b45C66e6d7A',\n  [ChainId.RINKEBY]: '0x8c9E7447ABE0607a610a1C3E7cCC1A7B51f729C2',\n  [ChainId.HARMONY_TESTNET]: '0xD76bF711EC7FA3740fC0ddae1A7CB648E77604e8',\n  [ChainId.ALFAJORES]: '0x3d8315f6BBdc0Afa659421a5856D4eC12c2F7Efa',\n}\n\nexport { MULTICALL_ABI, MULTICALL_ADDRESS, STAKING_REWARDS_FACTORY_ABI, STAKING_REWARDS_DISTRIBUTION_ABI }\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { ChainId, SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on the target chain.\n *\n * The only instances of the base class `Currency` are native currencies such as Ether for Ethereum and xDAI for xDAI.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  public static readonly USD: Currency = new Currency(18, 'USD', 'US dollar')\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n  public static readonly HARMONY: Currency = new Currency(18, 'ONE', 'ONE')\n  public static readonly MATIC: Currency = new Currency(18, 'MATIC', 'MATIC')\n  public static readonly CELO: Currency = new Currency(18, 'CELO', 'CELO')\n\n  private static readonly NATIVE_CURRENCY: { [chainId in ChainId]: Currency } = {\n    [ChainId.MAINNET]: Currency.ETHER,\n    [ChainId.RINKEBY]: Currency.ETHER,\n    [ChainId.HARMONY]: Currency.HARMONY,\n    [ChainId.ALFAJORES]: Currency.CELO,\n    [ChainId.HARMONY_TESTNET]: Currency.HARMONY,\n  }\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  public static isNative(currency: Currency): boolean {\n    return Object.values(Currency.NATIVE_CURRENCY).indexOf(currency) >= 0\n  }\n\n  public static getNative(chainId: ChainId): Currency {\n    return Currency.NATIVE_CURRENCY[chainId]\n  }\n}\n\nexport const USD = Currency.USD\nexport const ETHER = Currency.ETHER\nexport const HARMONY = Currency.HARMONY\nexport const CELO = Currency.CELO\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public static readonly WETH: { [key: number]: Token } = {\n    [ChainId.MAINNET]: new Token(\n      ChainId.MAINNET,\n      '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.RINKEBY]: new Token(\n      ChainId.RINKEBY,\n      '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.HARMONY]: new Token(\n      ChainId.HARMONY,\n      '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n      18,\n      'WONE',\n      'Wrapped ONE'\n    ),\n    [ChainId.HARMONY_TESTNET]: new Token(\n      ChainId.HARMONY_TESTNET,\n      '0x7466d7d0C21Fa05F32F5a0Fa27e12bdC06348Ce2',\n      18,\n      'WONE',\n      'Wrapped ONE'\n    ),\n    [ChainId.ALFAJORES]: new Token(\n      ChainId.ALFAJORES,\n      '0x524d97A67f50F4A062C28c74F60703Aec9028a94',\n      18,\n      'WCELO',\n      'Wrapped Celo'\n    )\n  }\n\n  // TODO:\n  public static readonly xDEXS: { [key: number]: Token } = {\n    [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0xA9c6d7F92a894310B9C04968326A9dE6D0e38724', 18, 'DEZU', 'DexSwapZoo'),\n    [ChainId.HARMONY]: new Token(ChainId.HARMONY, '0x6d3363020963a64B4DfA8f7F9f4Dc0cBaDCe7858', 18, 'DEZU', 'DexSwapZoo'),\n    [ChainId.HARMONY_TESTNET]: new Token(ChainId.HARMONY_TESTNET, '0x8E8645D7A03d53bF41BcFfE26CfCCBA14354028C', 18, 'DEZU', 'DexSwapZoo'),\n    [ChainId.ALFAJORES]: new Token(ChainId.ALFAJORES, '0x64b8EaB670f580817b26023f376bb91E32501fE6', 18, 'DEZU', 'DexSwapZoo'),\n  }\n\n  public static readonly POOF: { [key: number]: Token } = {\n    // [ChainId.CELO]: new Token(ChainId.CELO, '0x8E8645D7A03d53bF41BcFfE26CfCCBA14354028C', 18, 'DEZU', 'DexSwapZoo'),\n    [ChainId.ALFAJORES]: new Token(ChainId.ALFAJORES, '0x00400FcbF0816bebB94654259de7273f4A05c762', 18, 'POOF', 'Poof Governance Token'),\n  }\n\n  public static readonly MCEUR: { [key: number]: Token } = {\n    // [ChainId.CELO]: new Token(ChainId.CELO, '0x8E8645D7A03d53bF41BcFfE26CfCCBA14354028C', 18, 'DEZU', 'DexSwapZoo'),\n    [ChainId.ALFAJORES]: new Token(ChainId.ALFAJORES, '0x0D9B4311657003251d1eFa085e74f761185F271c', 18, 'mcEUR', 'Moola cEUR'),\n  }\n\n  public static readonly CEUR: { [key: number]: Token } = {\n    // [ChainId.CELO]: new Token(ChainId.CELO, '0x8E8645D7A03d53bF41BcFfE26CfCCBA14354028C', 18, 'DEZU', 'DexSwapZoo'),\n    [ChainId.ALFAJORES]: new Token(ChainId.ALFAJORES, '0x10c892A6EC43a53E45D0B916B4b7D383B1b78C0F', 18, 'cEUR', 'Celo Euro'),\n  }\n\n  public static readonly MOOLA: { [key: number]: Token } = {\n    // [ChainId.CELO]: new Token(ChainId.CELO, '0x8E8645D7A03d53bF41BcFfE26CfCCBA14354028C', 18, 'DEZU', 'DexSwapZoo'),\n    [ChainId.ALFAJORES]: new Token(ChainId.ALFAJORES, '0x17700282592D6917F6A73D0bF8AcCf4D578c131e', 18, 'MOO', 'Moola'),\n  }\n\n  public static readonly MCUSD: { [key: number]: Token } = {\n    // [ChainId.CELO]: new Token(ChainId.CELO, '0x8E8645D7A03d53bF41BcFfE26CfCCBA14354028C', 18, 'DEZU', 'DexSwapZoo'),\n    [ChainId.ALFAJORES]: new Token(ChainId.ALFAJORES, '0x3a0EA4e0806805527C750AB9b34382642448468D', 18, 'mcUSD', 'Moola cUSD'),\n  }\n\n  public static readonly MCELO: { [key: number]: Token } = {\n    // [ChainId.CELO]: new Token(ChainId.CELO, '0x8E8645D7A03d53bF41BcFfE26CfCCBA14354028C', 18, 'DEZU', 'DexSwapZoo'),\n    [ChainId.ALFAJORES]: new Token(ChainId.ALFAJORES, '0x653cC2Cc0Be398614BAd5d5328336dc79281e246', 18, 'mCELO', 'Moola CELO'),\n  }\n\n  public static readonly CUSD: { [key: number]: Token } = {\n    // [ChainId.CELO]: new Token(ChainId.CELO, '0x8E8645D7A03d53bF41BcFfE26CfCCBA14354028C', 18, 'DEZU', 'DexSwapZoo'),\n    [ChainId.ALFAJORES]: new Token(ChainId.ALFAJORES, '0x874069Fa1Eb16D44d622F2e0Ca25eeA172369bC1', 18, 'cUSD', 'Celo Dollar'),\n  }\n\n  public static readonly SCELO: { [key: number]: Token } = {\n    // [ChainId.CELO]: new Token(ChainId.CELO, '0x8E8645D7A03d53bF41BcFfE26CfCCBA14354028C', 18, 'DEZU', 'DexSwapZoo'),\n    [ChainId.ALFAJORES]: new Token(ChainId.ALFAJORES, '0xb9B532e99DfEeb0ffB4D3EDB499f09375CF9Bf07', 18, 'sCELO', 'Savings CELO'),\n  }\n\n  public static readonly RCELO: { [key: number]: Token } = {\n    // [ChainId.CELO]: new Token(ChainId.CELO, '0x8E8645D7A03d53bF41BcFfE26CfCCBA14354028C', 18, 'DEZU', 'DexSwapZoo'),\n    [ChainId.ALFAJORES]: new Token(ChainId.ALFAJORES, '0xF194afDf50B03e69Bd7D057c1Aa9e10c9954E4C9', 18, 'rCELO', 'Rewards CELO'),\n  }\n\n  public static readonly ZOO: { [key: number]: Token } = {\n    // [ChainId.CELO]: new Token(ChainId.CELO, '0x8E8645D7A03d53bF41BcFfE26CfCCBA14354028C', 18, 'DEZU', 'DexSwapZoo'),\n    [ChainId.ALFAJORES]: new Token(ChainId.ALFAJORES, '0x0fCA561Cb5288b93C3A9aE9B9338a0458d5D1cff', 18, 'ZOO', 'ZooHarmony'),\n    [ChainId.HARMONY]: new Token(ChainId.HARMONY, '0x9E0882e93d7f19E3D3Fc6d062652FE7e9E375Fda', 18, 'ZOO', 'ZooHarmony'),\n    [ChainId.HARMONY_TESTNET]: new Token(ChainId.HARMONY_TESTNET, '0xAd2F2D10d8056ECa21A26436245AC2666a6662aB', 18, 'ZOO', 'ZooHarmony'),\n  }\n\n  public static readonly ZDEX: { [key: number]: Token } = {\n    // [ChainId.CELO]: new Token(ChainId.CELO, '0x8E8645D7A03d53bF41BcFfE26CfCCBA14354028C', 18, 'DEZU', 'DexSwapZoo'),\n    [ChainId.ALFAJORES]: new Token(ChainId.ALFAJORES, '0x108B870375a1A0aBBD24306A6Ff990a87CB6d31d', 18, 'ZDEX', 'ZooDex'),\n    [ChainId.HARMONY]: new Token(ChainId.HARMONY, '0x520D479046A02A875D9F3b46CA661Da67f3c2735', 18, 'ZDEX', 'ZooDex'),\n    [ChainId.HARMONY_TESTNET]: new Token(ChainId.HARMONY_TESTNET, '0xbd38b88bAA29ADF42f81D74E6EaBCE44f1B38e33', 18, 'ZDEX', 'ZooDex'),\n  }\n\n\n  public static readonly WONE: { [key: number]: Token } = {\n    [ChainId.HARMONY]: new Token(ChainId.HARMONY, '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a', 18, 'WONE', 'Wrapped One'),\n    [ChainId.HARMONY_TESTNET]: new Token(ChainId.HARMONY_TESTNET, '0x7466d7d0C21Fa05F32F5a0Fa27e12bdC06348Ce2', 18, 'WONE', 'Wrapped One')\n  }\n\n\n  private static readonly NATIVE_CURRENCY_WRAPPER: { [chainId in ChainId]: Token } = {\n    [ChainId.MAINNET]: Token.WETH[ChainId.MAINNET],\n    [ChainId.RINKEBY]: Token.WETH[ChainId.RINKEBY],\n    [ChainId.HARMONY]: Token.WONE[ChainId.HARMONY],\n    [ChainId.HARMONY_TESTNET]: Token.WETH[ChainId.HARMONY_TESTNET],\n    [ChainId.ALFAJORES]: Token.WETH[ChainId.ALFAJORES],\n  }\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  public static getNativeWrapper(chainId: ChainId): Token {\n    return Token.NATIVE_CURRENCY_WRAPPER[chainId]\n  }\n\n  public static isNativeWrapper(token: Token): boolean {\n    return Token.NATIVE_CURRENCY_WRAPPER[token.chainId].equals(token)\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\n// reexport for convenience\nexport const WETH = Token.WETH\nexport const xDEXS = Token.xDEXS\nexport const WONE = Token.WONE\nexport const ZDEX = Token.ZDEX\nexport const ZOO = Token.ZOO\nexport const RCELO = Token.RCELO\nexport const SCELO = Token.SCELO\nexport const MCUSD = Token.MCUSD\nexport const MCELO = Token.MCELO\nexport const CUSD = Token.CUSD\nexport const MCEUR = Token.MCEUR\nexport const CEUR = Token.CEUR\nexport const MOOLA = Token.MOOLA\nexport const POOF = Token.POOF\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, USD } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static nativeCurrency(amount: BigintIsh, chainId: number): CurrencyAmount {\n    const nativeCurrency = Currency.getNative(chainId)\n    invariant(!!nativeCurrency, 'NO_NATIVE_CURRENCY')\n    return new CurrencyAmount(nativeCurrency, amount)\n  }\n\n  /**\n   * Helper that calls the constructor with the USD currency\n   * @param amount amount of usd experessed in wei (with 18 decimals resolution)\n   */\n  public static usd(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(USD, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, ChainId, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.nativeCurrency(super.multiply(currencyAmount.raw).quotient, ChainId.MAINNET)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { BigintIsh, ChainId, defaultSwapFee, FACTORY_ADDRESS, INIT_CODE_HASH, ROUTER_ADDRESS, _30 } from '../constants'\n\nconst UNISWAP_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nconst SUSHISWAP_FACTORY_ADDRESS = '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac'\nconst VIPERSWAP_FACTORY_ADDRESS = '0x7D02c116b98d0965ba7B642ace0183ad8b8D2196' // mainnet\nconst UBESWAP_FACTORY_ADDRESS = '0x62d5b84be28a183abb507e125b384122d2c25fae' // test\n\nconst UNISWAP_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nconst SUSHISWAP_ROUTER_ADDRESS = '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F'\nconst VIPERSWAP_ROUTER_ADDRESS = '0xf012702a5f0e54015362cBCA26a26fc90AA832a3' // mainnet //\nconst UBESWAP_ROUTER_ADDRESS = '0xe3d8bd6aed4f159bc8000a9cd47cffdb95f96121' // test //\n\n\n\n\n\nexport class RoutablePlatform {\n  public readonly name: string\n  public readonly factoryAddress: { [supportedChainId in ChainId]?: string }\n  public readonly routerAddress: { [supportedChainId in ChainId]?: string }\n  public readonly initCodeHash: string\n  public readonly defaultSwapFee: BigintIsh\n\n  public static readonly DEXSWAP = new RoutablePlatform(\n    'DEXSWAP',\n    FACTORY_ADDRESS,\n    ROUTER_ADDRESS,\n    INIT_CODE_HASH,\n    defaultSwapFee\n  )\n  public static readonly UNISWAP = new RoutablePlatform(\n    'Uniswap',\n    { [ChainId.MAINNET]: UNISWAP_FACTORY_ADDRESS, [ChainId.RINKEBY]: UNISWAP_FACTORY_ADDRESS },\n    { [ChainId.MAINNET]: UNISWAP_ROUTER_ADDRESS, [ChainId.RINKEBY]: UNISWAP_ROUTER_ADDRESS },\n    '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f',\n    _30\n  )\n  public static readonly SUSHISWAP = new RoutablePlatform(\n    'Sushiswap',\n    { [ChainId.MAINNET]: SUSHISWAP_FACTORY_ADDRESS, [ChainId.RINKEBY]: SUSHISWAP_FACTORY_ADDRESS },\n    { [ChainId.MAINNET]: SUSHISWAP_ROUTER_ADDRESS, [ChainId.RINKEBY]: SUSHISWAP_ROUTER_ADDRESS },\n    '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    _30\n  )\n\n  public static readonly VIPERSWAP = new RoutablePlatform(\n    'Viperswap',\n    { [ChainId.HARMONY]: VIPERSWAP_FACTORY_ADDRESS},\n    { [ChainId.HARMONY]: VIPERSWAP_ROUTER_ADDRESS},\n    '0x162f79e638367cd45a118c778971dfd8d96c625d2798d3b71994b035cfe9b6dc',\n    _30\n  )\n\n  public static readonly UBESWAP = new RoutablePlatform(\n    'Ubeswap',\n    { [ChainId.ALFAJORES]: UBESWAP_FACTORY_ADDRESS},\n    { [ChainId.ALFAJORES]: UBESWAP_ROUTER_ADDRESS},\n    '0x162f79e638367cd45a118c778971dfd8d96c625d2798d3b71994b035cfe9b6dc',\n    _30\n  )\n\n\n  public constructor(\n    name: string,\n    factoryAddress: { [supportedChainId in ChainId]?: string },\n    routerAddress: { [supportedChainId in ChainId]?: string },\n    initCodeHash: string,\n    defaultSwapFee: BigintIsh\n  ) {\n    this.name = name\n    this.factoryAddress = factoryAddress\n    this.routerAddress = routerAddress\n    this.initCodeHash = initCodeHash\n    this.defaultSwapFee = defaultSwapFee\n  }\n\n  public supportsChain(chainId: ChainId): boolean {\n    return !!this.factoryAddress[chainId]\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  _30,\n  _10000,\n  defaultSwapFee,\n  defaultProtocolFeeDenominator\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\nimport { ChainId } from '../constants'\nimport { RoutablePlatform } from './routable-platform'\nimport { LiquidityMiningCampaign } from './liquidity-mining-campaign'\n\nconst INITIAL_CACHE_STATE: { [chainId in ChainId]: any } = {\n  [ChainId.MAINNET]: {},\n  [ChainId.ALFAJORES]: {},\n  [ChainId.HARMONY]: {},\n  [ChainId.HARMONY_TESTNET]: {},\n  [ChainId.RINKEBY]: {}\n}\n\nlet PAIR_ADDRESS_CACHE: {\n  [supportedPlatformName: string]: {\n    [chainId: number]: { [token0Address: string]: { [token1Address: string]: string } }\n  }\n} = {\n  [RoutablePlatform.DEXSWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.SUSHISWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.UNISWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.VIPERSWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.UBESWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  }\n}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  public readonly swapFee: BigintIsh = defaultSwapFee\n  public readonly protocolFeeDenominator: BigintIsh = defaultProtocolFeeDenominator\n  public readonly platform: RoutablePlatform\n  public liquidityMiningCampaigns: LiquidityMiningCampaign[]\n\n  /**\n   * Returns true if the two pairs are equivalent, i.e. have the same address (calculated using create2).\n   * @param other other pair to compare\n   */\n  public equals(other: Pair): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.liquidityToken.address === other.liquidityToken.address\n  }\n\n  public static getAddress(tokenA: Token, tokenB: Token, platform: RoutablePlatform = RoutablePlatform.DEXSWAP): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    const chainId = tokenA.chainId\n    invariant(platform.supportsChain(chainId), 'INVALID_PLATFORM_CHAIN_ID')\n    if (PAIR_ADDRESS_CACHE?.[platform.name]?.[chainId]?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [platform.name]: {\n          ...PAIR_ADDRESS_CACHE[platform.name],\n          [chainId]: {\n            ...PAIR_ADDRESS_CACHE[platform.name][chainId],\n            [tokens[0].address]: {\n              ...PAIR_ADDRESS_CACHE?.[platform.name]?.[chainId]?.[tokens[0].address],\n              [tokens[1].address]: getCreate2Address(\n                platform.factoryAddress[chainId] as string,\n                keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n                platform.initCodeHash\n              )\n            }\n          }\n        }\n      }\n    }\n    return PAIR_ADDRESS_CACHE[platform.name][chainId][tokens[0].address][tokens[1].address]\n  }\n\n  constructor(\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount,\n    swapFee?: BigintIsh,\n    protocolFeeDenominator?: BigintIsh,\n    platform: RoutablePlatform = RoutablePlatform.DEXSWAP,\n    liquidityMiningCampaigns: LiquidityMiningCampaign[] = []\n  ) {\n    invariant(tokenAmountA.token.chainId === tokenAmountB.token.chainId, 'CHAIN_ID')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n\n    this.platform = platform ? platform : RoutablePlatform.DEXSWAP\n    const liquidityTokenAddress = Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, platform)\n    this.liquidityToken = new Token(tokenAmounts[0].token.chainId, liquidityTokenAddress, 18, 'DEXS', 'DexSwap')\n    this.protocolFeeDenominator = protocolFeeDenominator ? protocolFeeDenominator : defaultProtocolFeeDenominator\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n    this.swapFee = swapFee ? swapFee : platform.defaultSwapFee\n    this.liquidityMiningCampaigns = liquidityMiningCampaigns\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, JSBI.subtract(_10000, parseBigintIsh(this.swapFee)))\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _10000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [\n      outputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount),\n        this.swapFee,\n        this.protocolFeeDenominator\n      )\n    ]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _10000)\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.raw, outputAmount.raw),\n      JSBI.subtract(_10000, parseBigintIsh(this.swapFee))\n    )\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [\n      inputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount),\n        this.swapFee,\n        this.protocolFeeDenominator\n      )\n    ]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, parseBigintIsh(this.protocolFeeDenominator)), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency } from './currency'\nimport { Token } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      pairs.every(pair => pair.platform === pairs[0].platform),\n      'PLATFORM'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (Currency.isNative(input) && pairs[0].involvesToken(Token.getNativeWrapper(pairs[0].chainId))),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (Currency.isNative(output) && pairs[pairs.length - 1].involvesToken(Token.getNativeWrapper(pairs[0].chainId))),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : Token.getNativeWrapper(pairs[0].chainId)]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { RoutablePlatform } from './routable-platform'\nimport { Route } from './route'\nimport { currencyEquals, Token } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (Currency.isNative(currencyAmount.currency))\n    return new TokenAmount(Token.getNativeWrapper(chainId), currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (Currency.isNative(currency)) return Token.getNativeWrapper(chainId)\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n  /**\n   * The unique identifier of the chain on which the swap is being performed (used to correctly handle the native currency).\n   */\n  public readonly chainId: ChainId\n  /**\n   * The swap platform this trade will execute on\n   */\n  public readonly platform: RoutablePlatform\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    this.chainId = route.chainId\n\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : Currency.isNative(route.input)\n        ? CurrencyAmount.nativeCurrency(amounts[0].raw, this.chainId)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : Currency.isNative(route.output)\n        ? CurrencyAmount.nativeCurrency(amounts[amounts.length - 1].raw, this.chainId)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n    this.platform = this.route.pairs[0].platform\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.nativeCurrency(slippageAdjustedAmountOut, this.chainId)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.nativeCurrency(slippageAdjustedAmountIn, this.chainId)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { BigintIsh } from '../../constants'\nimport { PricedToken } from '../priced-token'\nimport { CurrencyAmount } from './currencyAmount'\nimport { TokenAmount } from './tokenAmount'\nimport { utils } from 'ethers'\n\nexport class PricedTokenAmount extends TokenAmount {\n  public readonly token: PricedToken\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: PricedToken, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public get nativeCurrencyAmount(): CurrencyAmount {\n    return new CurrencyAmount(\n      this.token.price.quoteCurrency,\n      utils\n        .parseUnits(\n          this.multiply(this.token.price).toFixed(this.token.price.quoteCurrency.decimals),\n          this.token.price.quoteCurrency.decimals\n        )\n        .toString()\n    )\n  }\n}\n","import { BigintIsh, ChainId, SECONDS_IN_YEAR } from '../constants'\nimport JSBI from 'jsbi'\nimport { parseBigintIsh } from '../utils'\nimport { CurrencyAmount, Fraction, Percent, TokenAmount } from './fractions'\nimport { PricedTokenAmount } from './fractions/priced-token-amount'\nimport { Pair } from './pair'\nimport invariant from 'tiny-invariant'\nimport { utils } from 'ethers'\nimport { Token } from './token'\n\n// this value is used as a floor to calculate apy, in order to avoid infinite results\nconst MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY: { [chainId in ChainId]: CurrencyAmount } = {\n  [ChainId.RINKEBY]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.05', Token.getNative(ChainId.RINKEBY).decimals).toString(),\n    ChainId.RINKEBY\n  ),\n  [ChainId.MAINNET]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.1', Token.getNative(ChainId.MAINNET).decimals).toString(),\n    ChainId.MAINNET\n  ),\n  [ChainId.HARMONY]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.05', Token.getNative(ChainId.HARMONY).decimals).toString(),\n    ChainId.HARMONY\n  ),\n  [ChainId.HARMONY_TESTNET]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.05', Token.getNative(ChainId.HARMONY_TESTNET).decimals).toString(),\n    ChainId.HARMONY_TESTNET\n  ),\n  [ChainId.ALFAJORES]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.05', Token.getNative(ChainId.ALFAJORES).decimals).toString(),\n    ChainId.ALFAJORES\n  )\n\n}\n\nexport class LiquidityMiningCampaign {\n  public readonly chainId: ChainId\n  public readonly address?: string\n  public readonly startsAt: BigintIsh\n  public readonly endsAt: BigintIsh\n  public readonly rewards: PricedTokenAmount[]\n  public readonly targetedPair: Pair\n  public readonly staked: PricedTokenAmount\n  public readonly duration: BigintIsh\n  public readonly locked: boolean\n  public readonly stakingCap: TokenAmount\n\n  constructor(\n    startsAt: BigintIsh,\n    endsAt: BigintIsh,\n    targetedPair: Pair,\n    rewards: PricedTokenAmount[],\n    staked: PricedTokenAmount,\n    locked: boolean,\n    stakingCap: TokenAmount,\n    address?: string\n  ) {\n    invariant(JSBI.lessThan(parseBigintIsh(startsAt), parseBigintIsh(endsAt)), 'INCONSISTENT_DATES')\n    invariant(staked.token.equals(targetedPair.liquidityToken), 'STAKED_LP_TOKEN')\n    for (const reward of rewards) {\n      invariant(staked.token.chainId === reward.token.chainId, 'CHAIN_ID')\n    }\n    this.chainId = staked.token.chainId\n    this.startsAt = startsAt\n    this.endsAt = endsAt\n    this.rewards = rewards\n    this.targetedPair = targetedPair\n    this.staked = staked\n    this.duration = JSBI.subtract(parseBigintIsh(endsAt), parseBigintIsh(startsAt))\n    this.locked = locked\n    this.stakingCap = stakingCap\n    this.address = address\n  }\n\n  public get remainingDuration(): JSBI {\n    const now = JSBI.BigInt(Math.floor(Date.now() / 1000))\n    const jsbiStartsAt = parseBigintIsh(this.startsAt)\n    const jsbiEndsAt = parseBigintIsh(this.endsAt)\n    if (JSBI.lessThan(now, jsbiStartsAt)) return JSBI.subtract(jsbiEndsAt, jsbiStartsAt)\n    if (JSBI.greaterThanOrEqual(now, jsbiEndsAt)) return JSBI.BigInt('0')\n    return JSBI.subtract(jsbiEndsAt, now)\n  }\n\n  public get remainingDistributionPercentage(): Percent {\n    const now = JSBI.BigInt(Math.floor(Date.now() / 1000))\n    const jsbiStartsAt = parseBigintIsh(this.startsAt)\n    const jsbiEndsAt = parseBigintIsh(this.endsAt)\n    if (JSBI.lessThan(now, jsbiStartsAt)) return new Percent('100', '100')\n    if (JSBI.greaterThanOrEqual(now, jsbiEndsAt)) return new Percent('0', '100')\n    return new Percent(JSBI.subtract(jsbiEndsAt, now), this.duration)\n  }\n\n  public get remainingRewards(): PricedTokenAmount[] {\n    const remainingDistributionPercentage = this.remainingDistributionPercentage\n    return this.rewards.map(reward => {\n      return new PricedTokenAmount(reward.token, remainingDistributionPercentage.multiply(reward.raw).toFixed(0))\n    })\n  }\n\n  public get apy(): Percent {\n    // when the campaign has ended, apy is returned as 0\n    if (this.remainingDuration.toString() === '0') return new Percent('0', '1')\n\n    const remainingRewards = this.remainingRewards\n\n    let stakedValueNativeCurrency = this.staked.nativeCurrencyAmount\n    if (stakedValueNativeCurrency.lessThan(MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY[this.chainId])) {\n      stakedValueNativeCurrency = MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY[this.chainId]\n    }\n\n    const cumulativeRemainingRewardAmountNativeCurrency = remainingRewards.reduce(\n      (accumulator, remainingRewardAmount) => {\n        return accumulator.add(remainingRewardAmount.nativeCurrencyAmount)\n      },\n      CurrencyAmount.nativeCurrency('0', this.chainId)\n    )\n\n    const yieldInPeriod = cumulativeRemainingRewardAmountNativeCurrency.divide(stakedValueNativeCurrency)\n    const annualizationMultiplier = new Fraction(SECONDS_IN_YEAR.toString(), this.remainingDuration.toString())\n    const rawApy = yieldInPeriod.multiply(annualizationMultiplier)\n    return new Percent(rawApy.numerator, rawApy.denominator)\n  }\n\n  public get currentlyActive(): boolean {\n    const now = JSBI.BigInt(Math.floor(Date.now() / 1000))\n    return (\n      JSBI.lessThanOrEqual(parseBigintIsh(this.startsAt), now) && JSBI.greaterThan(parseBigintIsh(this.endsAt), now)\n    )\n  }\n\n  public get ended(): boolean {\n    return JSBI.greaterThan(JSBI.BigInt(Math.floor(Date.now() / 1000)), parseBigintIsh(this.endsAt))\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { Price } from './fractions'\nimport { Token } from './token'\n\n/**\n * Represents an ERC20 token and its price, expressed in any given currency.\n */\nexport class PricedToken extends Token {\n  public readonly price: Price\n\n  constructor(chainId: ChainId, address: string, decimals: number, price: Price, symbol?: string, name?: string) {\n    invariant(price.baseCurrency.symbol === symbol && price.baseCurrency.decimals === decimals, 'TOKEN')\n    super(chainId, address, decimals, symbol, name)\n    this.price = price\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { Currency, CurrencyAmount, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const nativeCurrency = Currency.getNative(trade.chainId)\n    const etherIn = trade.inputAmount.currency === nativeCurrency\n    const etherOut = trade.outputAmount.currency === nativeCurrency\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import JSBI from 'jsbi'\nimport { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IDexSwapPair from 'dexswap-core/build/IDexSwapPair.json'\nimport IDexSwapFactory from 'dexswap-core/build/IDexSwapFactory.json'\nimport invariant from 'tiny-invariant'\nimport { ChainId, BigintIsh, FACTORY_ADDRESS, MULTICALL_ADDRESS, MULTICALL_ABI } from './constants'\nimport { Token } from './entities/token'\nimport { RoutablePlatform } from './entities/routable-platform'\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId)),\n    platform: RoutablePlatform = RoutablePlatform.DEXSWAP\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB, platform)\n    const [reserves0, reserves1] = await new Contract(address, IDexSwapPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    const tokenAmountA = new TokenAmount(tokenA, balances[0])\n    const tokenAmountB = new TokenAmount(tokenB, balances[1])\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    const liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, platform),\n      18,\n      'DEXS',\n      'DexSwap'\n    )\n    const swapFee = JSBI.BigInt(await new Contract(liquidityToken.address, IDexSwapPair.abi, provider).swapFee())\n    const protocolFeeDenominator = JSBI.BigInt(\n      await new Contract(\n        FACTORY_ADDRESS[tokenAmountA.token.chainId],\n        IDexSwapFactory.abi,\n        provider\n      ).protocolFeeDenominator()\n    )\n    return new Pair(tokenAmountA, tokenAmountB, swapFee, protocolFeeDenominator)\n  }\n\n  /**\n   * Fetches swap fee information from a liquidity token of a token pair\n   * @param liquidityToken the liquidity token from which the swap fee info will be fetched\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchSwapFee(\n    liquidityToken: Token,\n    provider = getDefaultProvider(getNetwork(liquidityToken.chainId))\n  ): Promise<{\n    fee: BigintIsh\n    owner: string\n  }> {\n    return {\n      fee: JSBI.BigInt(await new Contract(liquidityToken.address, IDexSwapPair.abi, provider).swapFee()),\n      owner: await new Contract(FACTORY_ADDRESS[liquidityToken.chainId], IDexSwapFactory.abi, provider).feeToSetter()\n    }\n  }\n\n  /**\n   * Fetches swap fee information from liquidity tokens of token pairs\n   * @param liquidityToken the liquidity tokens from which the swap fee info will be fetched\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchSwapFees(\n    liquidityTokens: Token[],\n    provider = getDefaultProvider(getNetwork(liquidityTokens[0].chainId))\n  ): Promise<\n    {\n      fee: BigintIsh\n      owner: string\n    }[]\n  > {\n    const multicall = new Contract(MULTICALL_ADDRESS[liquidityTokens[0].chainId], MULTICALL_ABI, provider)\n    const factoryContract = new Contract(FACTORY_ADDRESS[liquidityTokens[0].chainId], IDexSwapFactory.abi, provider)\n    const liquidityTokenContract = new Contract(liquidityTokens[0].address, IDexSwapPair.abi, provider)\n    let calls = []\n    calls.push({\n      address: factoryContract.address,\n      callData: factoryContract.interface.encodeFunctionData(factoryContract.interface.getFunction('feeToSetter()'))\n    })\n    for (let tokenPairsIndex = 0; tokenPairsIndex < liquidityTokens.length; tokenPairsIndex++) {\n      calls.push({\n        address: liquidityTokens[tokenPairsIndex].address,\n        callData: liquidityTokenContract.interface.encodeFunctionData(\n          liquidityTokenContract.interface.getFunction('swapFee()')\n        )\n      })\n    }\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    const owner = factoryContract.interface.decodeFunctionResult(\n      factoryContract.interface.getFunction('feeToSetter()'),\n      result.returnData[0]\n    )[0]\n    let fees = []\n    for (let resultIndex = 1; resultIndex < result.returnData.length; resultIndex++) {\n      fees.push({\n        fee: JSBI.BigInt(\n          liquidityTokenContract.interface.decodeFunctionResult(\n            liquidityTokenContract.interface.getFunction('swapFee()'),\n            result.returnData[resultIndex]\n          )[0]\n        ),\n        owner\n      })\n    }\n    return fees\n  }\n\n  /**\n   * Fetches swap fee information of all registered token pairs from factory\n   * @param chainId the chainId of the network to fecth the swap fees\n   * @param swapFeesCache a cache of already fetched fees to be skiped\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchAllSwapFees(\n    chainId: ChainId,\n    swapFeesCache: {\n      [key: string]: {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {},\n    provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<{\n    [key: string]: {\n      fee: BigintIsh\n      owner: string\n    }\n  }> {\n    const multicall = new Contract(MULTICALL_ADDRESS[chainId], MULTICALL_ABI, provider)\n    const factoryContract = new Contract(FACTORY_ADDRESS[chainId], IDexSwapFactory.abi, provider)\n    const allPairsLength = await factoryContract.allPairsLength()\n    let allSwapPairs: {\n      [key: string]: {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {}\n\n    // Get first token pairs from cache\n    let tokenPairsCache = Object.keys(swapFeesCache)\n    let tokenPairsToFetch: Token[] = []\n    for (let tokenPaisCacheIndex = 0; tokenPaisCacheIndex < tokenPairsCache.length; tokenPaisCacheIndex++) {\n      allSwapPairs[tokenPairsCache[tokenPaisCacheIndex]] = {\n        fee: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].fee,\n        owner: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].owner\n      }\n    }\n\n    // Get rest of the token pairs that are not cached\n    let calls = []\n    for (let pairIndex = tokenPairsCache.length; pairIndex < allPairsLength; pairIndex++)\n      calls.push({\n        address: factoryContract.address,\n        callData: factoryContract.interface.encodeFunctionData(\n          factoryContract.interface.getFunction('allPairs(uint)'),\n          [pairIndex]\n        )\n      })\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    for (let resultIndex = 0; resultIndex < result.returnData.length; resultIndex++) {\n      const tokenPairAddress = factoryContract.interface.decodeFunctionResult(\n        factoryContract.interface.getFunction('allPairs(uint256)'),\n        result.returnData[resultIndex]\n      )[0]\n      tokenPairsToFetch.push(new Token(chainId, tokenPairAddress, 18, 'DEXS', 'DexSwap'))\n    }\n\n    // Fetch the pairs that we dont have the fee and owner\n    const swapFeesFetched = tokenPairsToFetch.length === 0 ? [] : await this.fetchSwapFees(tokenPairsToFetch, provider)\n    for (let tokenPairsToFetchIndex = 0; tokenPairsToFetchIndex < tokenPairsToFetch.length; tokenPairsToFetchIndex++)\n      allSwapPairs[tokenPairsToFetch[tokenPairsToFetchIndex].address] = swapFeesFetched[tokenPairsToFetchIndex]\n    return allSwapPairs\n  }\n\n  /**\n   * Fetches protocol fee information from the token pair factory\n   * @param chainId the chainId of the network to fecth the protocol fee\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchProtocolFee(\n    chainId: ChainId,\n    provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<{\n    feeDenominator: BigintIsh\n    feeReceiver: string\n  }> {\n    const factoryContract = await new Contract(FACTORY_ADDRESS[chainId], IDexSwapFactory.abi, provider)\n    const feeDenominator = await factoryContract.protocolFeeDenominator()\n    const feeReceiver = await factoryContract.feeTo()\n    return { feeDenominator, feeReceiver }\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","FACTORY_ADDRESS","MAINNET","coreMainnet","factory","RINKEBY","coreRinkeby","HARMONY","coreHarmony","HARMONY_TESTNET","coreHarmony_Testnet","ALFAJORES","coreAlfajores","ROUTER_ADDRESS","peripheryMainnet","router","peripheryRinkeby","peripheryHarmony","peripheryHarmony_Testnet","peripheryAlfajores","STAKING_REWARDS_FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_25","SECONDS_IN_YEAR","_30","_100","_1000","_10000","defaultSwapFee","defaultProtocolFeeDenominator","SOLIDITY_TYPE_MAXIMA","uint8","uint256","MULTICALL_ADDRESS","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","Currency","decimals","symbol","isNative","currency","values","NATIVE_CURRENCY","indexOf","getNative","chainId","ETHER","CELO","USD","Token","equals","other","this","sortsBefore","toLowerCase","getNativeWrapper","NATIVE_CURRENCY_WRAPPER","isNativeWrapper","token","currencyEquals","currencyA","currencyB","WETH","WONE","xDEXS","ZDEX","ZOO","RCELO","SCELO","MCUSD","MCELO","CUSD","MCEUR","CEUR","MOOLA","POOF","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","amount","parsedAmount","exponentiate","nativeCurrency","usd","raw","toExact","TokenAmount","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","RoutablePlatform","factoryAddress","routerAddress","initCodeHash","supportsChain","INITIAL_CACHE_STATE","PAIR_ADDRESS_CACHE","DEXSWAP","SUSHISWAP","UNISWAP","VIPERSWAP","UBESWAP","Pair","tokenAmountA","tokenAmountB","swapFee","protocolFeeDenominator","platform","liquidityMiningCampaigns","tokenAmounts","liquidityTokenAddress","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE3","_PAIR_ADDRESS_CACHE3$","_PAIR_ADDRESS_CACHE3$2","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","PricedTokenAmount","price","utils","parseUnits","MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY","LiquidityMiningCampaign","startsAt","endsAt","targetedPair","rewards","staked","locked","stakingCap","duration","now","Math","floor","Date","jsbiStartsAt","jsbiEndsAt","remainingDistributionPercentage","map","reward","remainingDuration","remainingRewards","stakedValueNativeCurrency","nativeCurrencyAmount","yieldInPeriod","remainingRewardAmount","annualizationMultiplier","rawApy","PricedToken","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","deadline","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","Fetcher","fetchPairData","provider","getDefaultProvider","getNetwork","Contract","IDexSwapPair","abi","getReserves","reserves0","reserves1","balances","IDexSwapFactory","fetchSwapFee","feeToSetter","fee","owner","fetchSwapFees","liquidityTokens","multicall","MULTICALL_ABI","factoryContract","liquidityTokenContract","calls","callData","encodeFunctionData","getFunction","tokenPairsIndex","aggregate","call","result","decodeFunctionResult","returnData","fees","resultIndex","fetchAllSwapFees","swapFeesCache","allPairsLength","allSwapPairs","tokenPairsCache","keys","tokenPairsToFetch","tokenPaisCacheIndex","pairIndex","swapFeesFetched","tokenPairsToFetchIndex","tokenPairAddress","fetchProtocolFee","feeDenominator","feeTo","feeReceiver"],"mappings":"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"}